OOP (Object Oriented Programming)
  - is about creating objects that contain both data and methods. It provides a clear structure for the programs and makes the code easier to maintain, modify and debug.

4 Pillars of OOP
  1. Inheritance - a class inherits the methods and properties of another class (allows developer to reuse code and easily add new features)
  2. Polymorphism - it means more than one form, the same entity can perform different scenarios (makes it easier to create flexible systems that are easier to understand and maintain)
             Method overloading - used to define multiple methods with the same name but with different parameters.
             Method overriding - the super class and the sub class have the same methods including the parameters
  3. Encapsulation - the process of wrapping data and related functions into a single unit (object).
                   - the process of combining data and codes into a single unit. We encapsulate a class with the use of access modifiers which control the visibility of variables and methods within a class. It helps keep code organized and helps prevent accidental data manipulation and changes.
             Access Modifiers
                  a. Public - public variable and methods can be accessed from anywhere, including outside the class (whole project)
                  b. Private - private variable and methods can be accessed within the class they are defined in (class level)
                  c. Protected - protected variables and methods can be accessed within the same class and subclasses (package and subclass)
                  d. Default - declared without any access modifier, the access level of default modifier is only within the package (package level)
  4. Abstraction - is the process of hiding unnecessary details of an object's internal structure. We can achieve abstraction by using abstract classes and interfaces.

Java try and catch
  try - allows you to define a block of code to be tested for errors while it is being executed
  catch - allows you to define a block of code to be executed if an error occurs in the try block
  finally - lets you execute a code after try catch regardless of the result

Java Constructor - a constructor in Java is similar to a method that is invoked when an object of the class is created. Unlike in Java methods, a constructor has the same name as the that of the class and does not have any return type.

Types of Constructor:
1. No-Arg Constructor - similar to a method, a Java constructor may or may not have any parameters (arguments).
2. Parameterized Constructor - a Java constructor can also accept one or more parameters.
3. Default Conctructor - if we do not create any constructor, the Java compiler automatically create a no-arg constructor during the execution of the program.


